# -*- coding: utf-8 -*-
"""23363021_Aldrin_Kerketta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugCeoXatvpJ55NSBQpOJtKA2IEz5z6ub

----
## 1. Pick any 7-10 stocks from NIFTY 50. Please provide rationale for selection of those stocks. It could be based on qualitative (business strategy) selection or quantitative (financial ratios) selection.

* Tata Steel (TATASTEEL):

Rationale: Tata Steel is a major player in the steel industry, and its performance is closely tied to economic growth. With increasing infrastructure development and demand for steel, Tata Steel is positioned for potential growth.

* Bajaj Auto (BAJAJ-AUTO):

Rationale: Bajaj Auto is a leading two-wheeler and three-wheeler manufacturer. The company has a strong market presence and benefits from the growth in the domestic and international automotive markets.

* Tata Motors (TATAMOTORS):

Rationale: Tata Motors is a leading automotive company with a diverse portfolio. The stock could benefit from the growth in the automobile sector and its focus on electric vehicles.

* Adani Ports (ADANIPORTS):

Rationale: Adani Ports is a key player in the logistics and port operations sector. With the increasing importance of efficient logistics and trade, the company is well-positioned for growth.

* JSW Steel (JSWSTEEL):

Rationale: JSW Steel is a major player in the steel industry. The stock can benefit from the overall growth in infrastructure and construction activities.

* Hindalco Industries (HINDALCO):

Rationale: Hindalco is a leading player in the aluminum industry. The stock could benefit from the increasing demand for aluminum in various industries, including automotive and construction.

* Divi's Laboratories (DIVISLAB):

Rationale: Divi's Labs is a pharmaceutical company known for its focus on research and development. The stock could be considered for its potential in the pharmaceutical sector.

* Cipla (CIPLA):

Rationale: Cipla is a prominent pharmaceutical company with a strong presence in both domestic and international markets. The healthcare sector's growth and Cipla's diversified product portfolio make it an interesting choice.

* Apollo Hospitals (APOLLOHOSP):

Rationale: Apollo Hospitals is a leading healthcare provider in India. With the increasing focus on healthcare, the stock could benefit from the growing demand for medical services.

* Wipro (WIPRO):

Rationale: Wipro is a major IT services company with a global presence. The stock could benefit from the increasing demand for IT services and digital transformation.
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from scipy.optimize import minimize

AdaniPorts = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/ADANIPORTS_consolidated.xlsx")
APOLLOHOSP = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/APOLLOHOSP_consolidated.xlsx")
BAJAJAUTO = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/BAJAJ-AUTO_consolidated.xlsx")
CIPLA = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/CIPLA_consolidated.xlsx")
DIVISLAB = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/DIVISLAB_consolidated.xlsx")
HINDALCO = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/HINDALCO_consolidated.xlsx")
JSWSTEEL = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/JSWSTEEL_consolidated.xlsx")
TATAMOTORS = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/TATAMOTORS_consolidated.xlsx")
TATASTEEL = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/TATASTEEL_consolidated.xlsx")
WIPRO = pd.read_excel("/content/drive/MyDrive/IIT/FA/Data/Consolidated/WIPRO_consolidated.xlsx")

stock_data_dict = {
    'AdaniPorts': AdaniPorts,
    'ApolloHosp': APOLLOHOSP,
    'BajajAuto': BAJAJAUTO,
    'Cipla': CIPLA,
    'DivisLab': DIVISLAB,
    'Hindalco': HINDALCO,
    'JSWSteel': JSWSTEEL,
    'TataMotors': TATAMOTORS,
    'TataSteel': TATASTEEL,
    'Wipro': WIPRO
}

print("Data for AdaniPorts:")
print(stock_data_dict['AdaniPorts'].head())

"""## 2. Create exhibits of price movement over 5 years for each of these stocks. You may use ggplot."""

def create_line_plot(stock_data, stock_name):
    stock_data = stock_data.drop_duplicates()
    date_column = next((col for col in stock_data.columns if 'date' in col.lower()), None)
    if date_column is None:
        print(f"Could not find a 'Date' column in {stock_name}")
        return

    close_column = next((col for col in stock_data.columns if 'close' in col.lower()), None)
    if close_column is None:
        print(f"Could not find a 'Close' column in {stock_name}")
        return

    stock_data[date_column] = pd.to_datetime(stock_data[date_column], format='%d-%b-%Y')
    fig = px.line(stock_data, x=date_column, y=close_column, title=f'{stock_name} Stock Price Movement')
    fig.show(width=1200, height=900)

for stock_name, stock_data in stock_data_dict.items():
    create_line_plot(stock_data, stock_name)

"""## 3. Compute the stock returns and standard deviation and create a dataframe of these for 5 years of data."""

returns_std_df = pd.DataFrame()

for stock_name, stock_data in stock_data_dict.items():

    close_column_name = 'close '

    if close_column_name in stock_data.columns:
        stock_data['Returns'] = stock_data[close_column_name].pct_change()
        stock_data = stock_data.dropna(subset=['Returns'])
        std_dev = stock_data['Returns'].std()
        returns_std_df = pd.concat([returns_std_df, pd.DataFrame({'Stock': [stock_name],
                                                                  'Returns': [stock_data['Returns'].mean()],
                                                                  'Std_Dev': [std_dev]})])
    else:
        print(f"Close column not found for {stock_name}")
print(returns_std_df)

"""## 4. Construct the variance covariance matrix and create a heatmap of correlation"""

closing_prices_dict = {stock_name: stock_data['close '] for stock_name, stock_data in stock_data_dict.items()}
closing_prices_dict

closing_prices_df = pd.DataFrame(closing_prices_dict)

closing_prices_df.fillna(0, inplace=True)
closing_prices_df

cov_matrix = closing_prices_df.pct_change().cov()

plt.figure(figsize=(10, 8))
sns.heatmap(cov_matrix, annot=True, cmap='coolwarm', fmt=".4f", linewidths=.5)
plt.title('Variance-Covariance Matrix and Heatmap of Correlation')
plt.show()

"""## 5. Use the R-code demonstrated or write your own piece of code to construct the portfolio using the Markowitz Portfolio Theory. Obtain the portfolio weights."""

def objective(weights, returns, cov_matrix):
    portfolio_return = weights.dot(returns)
    portfolio_volatility = (weights.dot(cov_matrix).dot(weights)) ** 0.5
    return -portfolio_return / portfolio_volatility


constraints = ({'type': 'eq', 'fun': lambda w: w.sum() - 1})

bounds = tuple((0, 1) for asset in range(len(returns_std_df)))

initial_weights = [1.0 / len(returns_std_df)] * len(returns_std_df)


result = minimize(objective, initial_weights, args=(returns_std_df['Returns'], cov_matrix),
                  method='SLSQP', bounds=bounds, constraints=constraints)
optimized_weights = result.x
portfolio_weights = pd.DataFrame({'Stock': returns_std_df['Stock'], 'Weight': optimized_weights})
print(portfolio_weights)

"""## 6. Use a virtual money of INR 1 cr to demonstrate the pie-chart of your portfolio allocation."""

import matplotlib.pyplot as plt

virtual_fund = 10000000

allocated_amounts = optimized_weights * virtual_fund
allocation_df = pd.DataFrame({'Stock': returns_std_df['Stock'], 'Allocated Amount': allocated_amounts})

plt.figure(figsize=(10, 6))
plt.pie(allocation_df['Allocated Amount'], labels=allocation_df['Stock'], autopct='%1.1f%%', startangle=140)
plt.title('Portfolio Allocation')
plt.show()

"""## 7. demonstrate the Sharpe ratio as well assuming a risk free rate of 7% (~indicative of T-Bill rates)."""

returns_std_df

import pandas as pd
import matplotlib.pyplot as plt

risk_free_rate = 0.07
returns_std_df['Sharpe_Ratio'] = (returns_std_df['Returns'] - risk_free_rate) / returns_std_df['Std_Dev']

plt.figure(figsize=(12, 6))
plt.bar(returns_std_df['Stock'], returns_std_df['Sharpe_Ratio'], color='skyblue')
plt.title('Sharpe Ratios for Stocks')
plt.xlabel('Stocks')
plt.ylabel('Sharpe Ratio')
plt.xticks(rotation=45, ha='right')

for i, v in enumerate(returns_std_df['Sharpe_Ratio']):
    plt.text(i, v + 0.02, f'{v:.2f}', ha='center', va='bottom')

plt.show()